import orjson
from fhir.resources.task import Task
import subprocess
import os
from iceberg_tools.data.simplifier import simplify, _render_dialect, SimplifierContextManager, simplify_directory


def test_simplify_task(distribution_schema):
    task = {
        "resourceType": "Task", "id": "857f89ab-2808-5592-a3e1-315466bc6181",
        "meta": {"versionId": "1", "lastUpdated": "2023-01-26T15:03:23.029+00:00",
                 "source": "#Vpgkq7bDayJaUwY1"}, "text": {"status": "generated",
                                                          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">Autogenerated task. Inserted to make data model research friendly.</div>"},
        "status": "completed", "intent": "order",
        "focus": {"reference": "Specimen/c43eab49-c9d3-52fb-9265-9db6461b847c"},
        "for": {"reference": "Patient/1efc46e2-8aad-46be-8713-13d17e3eda83"}, "input": [
            {"type": {"coding": [{"code": "specimen"}]},
             "valueReference": {"reference": "Specimen/c43eab49-c9d3-52fb-9265-9db6461b847c"}}], "output": [
            {"type": {"coding": [{"code": "DocumentReference"}]},
             "valueReference": {"reference": "DocumentReference/64ca4c81-d466-5eb6-b57e-62238241c0e4"}}]
    }

    task = Task(**task)
    with SimplifierContextManager():

        simplified, references = simplify(task, dialect='PFB')
        rendered = _render_dialect(simplified, references, 'PFB', schemas=distribution_schema, project_id=None)

        print(orjson.dumps(rendered, option=orjson.OPT_INDENT_2).decode())

        assert len(rendered['relations']) > 0
        document_reference = next(iter([_ for _ in rendered['relations'] if _['dst_name'] == 'document_reference']), None)
        assert document_reference, "Should render DocumentReference relation"


def test_simplify_task_grip(distribution_schema):
    task = {
        "resourceType": "Task",
        "id": "857f89ab-2808-5592-a3e1-315466bc6181",
        "meta": {
            "versionId": "1",
            "lastUpdated": "2023-01-26T15:03:23.029+00:00",
            "source": "#Vpgkq7bDayJaUwY1"
        },
        "text": {
            "status": "generated",
            "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">Autogenerated task. Inserted to make data model research friendly.</div>"
        },
        "status": "completed",
        "intent": "order",
        "focus": {
            "reference": "Specimen/c43eab49-c9d3-52fb-9265-9db6461b847c"
        },
        "for": {
            "reference": "Patient/1efc46e2-8aad-46be-8713-13d17e3eda83"
        },
        "input": [
            {
                "type": {
                    "coding": [
                        {
                            "code": "specimen"
                        }
                    ]
                },
                "valueReference": {
                    "reference": "Specimen/c43eab49-c9d3-52fb-9265-9db6461b847c"
                }
            }
        ],
        "output": [
            {
                "type": {
                    "coding": [
                        {
                            "code": "DocumentReference"
                        }
                    ]
                },
                "valueReference": {
                    "reference": "DocumentReference/64ca4c81-d466-5eb6-b57e-62238241c0e4"
                }
            }
        ]
    }
    task = Task(**task)
    with SimplifierContextManager():
        simplified, references = simplify(task, dialect='GRIP')
        rendered = _render_dialect(simplified, references, 'GRIP', schemas=distribution_schema, project_id="test-synthea")
        print(orjson.dumps(rendered, option=orjson.OPT_INDENT_2).decode())
        assert rendered["data"] == {
            "id": "857f89ab-2808-5592-a3e1-315466bc6181",
            "status": "completed",
            "intent": "order",
            'auth_resource_path': '/programs/test/projects/test',
            'project_id': 'test-synthea'
        }


def parse_directory_info(directory_info):
    files = []
    for line in str(directory_info).strip().split('\n'):
        parts = line.split()
        if len(parts) == 2:
            continue
        filename = parts[-1]
        size = int(parts[-5])
        files.append({'filename': filename, 'size': size})
    return files


# Kindof a lengthy test
def test_simplify_synthea_grip():
    print("CURRENT DIR", os.getcwd())

    simplify_directory("tests/fixtures/simplify/synthea",
                       "**/*.*", "grip_data",
                       "iceberg/schemas/graph/graph-fhir.json",
                       "GRIP", "config.yaml",
                       "synthea-test",
                       transform_ids=None)

    expected_files = [
        {'filename': 'Condition.ndjson', 'size': 3941769},
        {'filename': 'DiagnosticReport.ndjson', 'size': 7299266},
        {'filename': 'DocumentReference.ndjson', 'size': 6683493},
        {'filename': 'Encounter.ndjson', 'size': 6081266},
        {'filename': 'Immunization.ndjson', 'size': 1029819},
        {'filename': 'Observation.ndjson', 'size': 34755721},
        {'filename': 'Patient.ndjson', 'size': 161823},
    ]

    result = subprocess.run(['ls', '-l', "grip_data"], capture_output=True, text=True).stdout
    actual_files = parse_directory_info(result)
    for expected, actual in zip(expected_files, actual_files):
        assert expected == actual, f"Assertion failed for file: {actual['filename']}"
