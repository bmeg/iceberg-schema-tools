
class: sifter
name: specimen_fhir_to_omop

outdir: ../output

config:
  specimen_file : ../output/specimen_omop_to_fhir.Specimen.Specimen.json.gz
  anatomic_site_file: ../output/specimen_omop_to_fhir.Anatomic_Site.BodyStructure.json.gz
 
inputs:
  specimen_Data:
    plugin:
       commandLine: python3 readable_to_epoch_time.py {{config.specimen_file}} Specimen
      
  anatomic_site_Data:
    jsonLoad:
      input: "{{config.anatomic_site_file}}"

pipelines:

  anatomic_data:
    - from: anatomic_site_Data
    - map:
        method: fix
        gpython: |
          def fix(row):
              return { 
                "id":str(row["id"]),
                "anatomic_site_concept_id":str(row["includedStructure"][0]["structure"]["coding"][0]["code"])
              }
           

  specimen:
    - from: specimen_Data
    - lookup:
        pipeline:
          from: anatomic_data
          key: id
        lookup: "{{row.collection.bodySite.reference.reference}}"
        copy:
          new_id: id
          anatomic_site_concept_id: anatomic_site_concept_id
    #- debug: {} 

    - map:
        method: build_omop_specimen
        gpython: |
          def Nonefy(listargs,out):
            for field in listargs:
              out[field] = None
            return out

          def is_int(num):
            try:
              int(num)
              return True
            except ValueError:
              return False

          def build_omop_specimen(row):
            #if "new_id" in row:
              #print(row["new_id"])
            
            if is_int(row["collection"]["collectedDateTime"]):
              row["collection"]["collectedDateTime"] = int(row["collection"]["collectedDateTime"])
            
            if "collectedDate" in row["collection"] and is_int(row["collection"]["collectedDate"]):
              row["collection"]["collectedDate"] = int(row["collection"]["collectedDate"])

            if is_int(row["identifier"][0]["value"]):
              row["identifier"][0]["value"] = int(row["identifier"][0]["value"])

            out = {
              "specimen_id": int(row["id"]),
              "person_id": str(row["subject"]["reference"]).split("Patient/")[1],
              "specimen_concept_id": int(row["type"]["coding"][0]["code"]),
              "specimen_type_concept_id": int(row["type"]["extension"][0]["valueString"]),
              "specimen_date": row["collection"]["collectedDate"]
            }

            non_req_vals = ["specimen_datetime", "quantity", "unit_concept_id", "anatomic_site_concept_id", 
            "disease_status_concept_id", "specimen_source_id", "specimen_source_value", "unit_source_value", 
            "anatomic_site_source_value", "disease_status_source_value"]
           
            out = Nonefy(non_req_vals,out)

            if "value" in row["identifier"][0] and row["identifier"][0]["value"] is not None:
              out["specimen_source_id"] = row["identifier"][0]["value"]
            
            if "anatomic_site_concept_id" in row and row["anatomic_site_concept_id"] is not None:
              out["anatomic_site_concept_id"] = row["anatomic_site_concept_id"]

            if "collectedDateTime" in row["collection"] and row["collection"] is not None:
              out["specimen_datetime"] = row["collection"]["collectedDateTime"]
            
            if "quantity" in row["collection"] and row["collection"]["quantity"] is not None:
              if "extension" in row["collection"]["quantity"] and row["collection"]["quantity"] is not None:
                out["unit_source_value"] = row["collection"]["quantity"]["extension"][0]["valueString"]
              
              if "unit" in row["collection"]["quantity"] and row["collection"]["quantity"]["unit"] is not None:
                out["unit_concept_id"] = row["collection"]["quantity"]["unit"]
              
              if "value" in row["collection"]["quantity"] and row["collection"]["quantity"]["value"] is not None:
                out["unit_concept_id"] = row["collection"]["quantity"]["value"]
            
            if "extension" in row and row["extension"] is not None:
              for elem in row["extension"]:
                if elem["url"] == "https://ohdsi.github.io/CommonDataModel/cdm54.html#SPECIMEN__disease_status_concept_id":
                  out["disease_status_concept_id"] = elem["valueString"]
                
                elif elem["url"] == "https://ohdsi.github.io/CommonDataModel/cdm54.html#SPECIMEN__specimen_source_value":
                  out["specimen_source_value"] = elem["valueString"]
            

            
            return out

            
    - emit:
        name: specimen
    

          



