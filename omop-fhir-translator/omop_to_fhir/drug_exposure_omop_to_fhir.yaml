class: sifter
name: drug_exposure_omop_to_fhir

outdir: ../output

config:
  drug_exposure:  ../data_used/redivis_drug_exposure.json
  schema: ../iceberg/schemas/bmeg/
  conceptData: ../data_used/MASTER_CONCEPT_TABLE_MODIFIED.json

inputs:
  drug_Exposure_Data:
    plugin:
      commandLine: python3 epochtime_convert.py {{config.drug_exposure}} Drug_Exposure
  
  conceptTheta:
    jsonLoad:
      input: "{{config.conceptData}}"
  
  medicationRequests:
    plugin:
      commandLine: python3 construct_medication_request.py {{config.drug_exposure}}

pipelines:
  conceptTable:
    - from: conceptTheta
    - map:
        method: fix
        gpython: |
          def fix(row):
            return {
              "concept_id": str(row["concept_id"]),
              "vocabulary_id": str(row["vocabulary_id"]),
              "concept_name": str(row["concept_name"]),
              "concept_code": str(row["concept_code"])
            }

  MedicationRequest:
    - from: medicationRequests
    - uuid:
        value: "{{row.id}}"
        field: id
        namespace: 'aced-ipd.org'

    - lookup:
        pipeline:
          from: conceptTable
          key: concept_id
        lookup: "{{row.drug_concept_id}}"
        copy: 
          CONCEPT_ID_NAME: concept_name
          CONCEPT_ID_CODE: concept_code
          CONCEPT_VOCAB_ID: vocabulary_id

    - map:
        method: cast
        gpython: |
          def cast(row):
            vocab_code_to_display = {
              "NUCC": "https://www.nucc.org/",
              "CMS Place of Service": "https://www.cms.gov/Medicare/Coding/place-of-service-codes",
              "SNOMED":"http://snomed.info/sct/",
              "LOINC": "https://loinc.org/",
              "Visit": "https://athena.ohdsi.org/search-terms/terms/",
              "Type Concept": "https://athena.ohdsi.org/search-terms/terms/",
              "ICD9CM": "https://www.cms.gov/Medicare/Coding/ICD9ProviderDiagnosticCodes/codes",
              "ICD10CM": "https://icd10cmtool.cdc.gov/",
              "SOPT": "https://www.nahdo.org/sopt",
              "Relationship": "https://athena.ohdsi.org/search-terms/terms/",
              "Vocabulary": "https://athena.ohdsi.org/search-terms/terms/",
              "UCUM": "https://ucum.org/",
              "MeSH": "https://www.nlm.nih.gov/research/umls/licensedcontent/umlsknowledgesources.html",
              "NDFRT": 'https://www.nlm.nih.gov/research/umls/rxnorm/docs/rxnormfiles.html',
              "Condition Type": "https://athena.ohdsi.org/search-terms/terms/",
              "NDC": "https://www.nlm.nih.gov/research/umls/rxnorm/docs/rxnormfiles.html",
              "RxNorm": "https://www.nlm.nih.gov/research/umls/rxnorm/docs/rxnormfiles.html",
              "RxNorm Extension": "https://www.nlm.nih.gov/research/umls/rxnorm/docs/rxnormfiles.html", #note sure about this one
              "Observation Type": "https://athena.ohdsi.org/search-terms/terms/",
              "None": "https://athena.ohdsi.org/search-terms/terms/",
              "CPT4": "https://www.nlm.nih.gov/research/umls/licensedcontent/umlsknowledgesources.html"
            }

            row["medication"] = {"concept":{
                  "coding":[{
                    "system": vocab_code_to_display[str(row["CONCEPT_VOCAB_ID"])],
                    "display": str(row["CONCEPT_ID_NAME"]),
                    "code": str(row["CONCEPT_ID_CODE"])
                  }],
                  "text": str(row["CONCEPT_ID_NAME"]),
                },
            }
            del(row["CONCEPT_ID_NAME"])
            del(row["CONCEPT_ID_CODE"])
            del(row["CONCEPT_VOCAB_ID"])
            del(row["drug_concept_id"])
              
            return row
    - emit:
        name: MedicationRequest

  MedicationStatement:
    - from: drug_Exposure_Data
    - uuid:
        value: "{{row.drug_exposure_id}}-MedicationStatement"
        field: id
        namespace: 'aced-idp.org'
    - uuid:
        value: "{{row.person_id}}"
        field: person_id_uuid
        namespace: 'aced-idp.org'
    - uuid:
        value: "{{row.visit_occurrence_id}}"
        field: visit_occurrence_id_uuid
        namespace: 'aced-idp.org'

    - map:
        method: cast
        gpython: |
          def cast(row):
            row["drug_concept_id"] = int(row["drug_concept_id"])
            row["drug_type_concept_id"] = int(row["drug_type_concept_id"])
            return row
          
    - lookup:
        pipeline:
          from: conceptTable
          key: concept_id
        lookup: "{{row.drug_concept_id}}"
        copy: 
          CONCEPT_ID_NAME: concept_name
          CONCEPT_ID_CODE: concept_code
          CONCEPT_VOCAB_ID: vocabulary_id

    - lookup:
        pipeline:
          from: conceptTable
          key: concept_id
        lookup: "{{row.drug_type_concept_id}}"
        copy: 
          NEWCABULARY_ID: vocabulary_id
          DRUG_TYPE_CONCEPT_ID_NAME: concept_name
          DRUG_TYPE_CONCEPT_ID_CODE: concept_code

    - map:
        method: fix
        gpython: | 
          def is_int(num):
              try:
                int(num)
                return True
              except ValueError:
                return False

          def fix(row):
            vocab_code_to_display = {
              "NUCC": "https://www.nucc.org/",
              "CMS Place of Service": "https://www.cms.gov/Medicare/Coding/place-of-service-codes",
              "SNOMED":"http://snomed.info/sct/",
              "LOINC": "https://loinc.org/",
              "Visit": "https://athena.ohdsi.org/search-terms/terms/",
              "Type Concept": "https://athena.ohdsi.org/search-terms/terms/",
              "ICD9CM": "https://www.cms.gov/Medicare/Coding/ICD9ProviderDiagnosticCodes/codes",
              "ICD10CM": "https://icd10cmtool.cdc.gov/",
              "SOPT": "https://www.nahdo.org/sopt",
              "Relationship": "https://athena.ohdsi.org/search-terms/terms/",
              "Vocabulary": "https://athena.ohdsi.org/search-terms/terms/",
              "UCUM": "https://ucum.org/",
              "MeSH": "https://www.nlm.nih.gov/research/umls/licensedcontent/umlsknowledgesources.html",
              "NDFRT": 'https://www.nlm.nih.gov/research/umls/rxnorm/docs/rxnormfiles.html',
              "Condition Type": "https://athena.ohdsi.org/search-terms/terms/",
              "NDC": "https://www.nlm.nih.gov/research/umls/rxnorm/docs/rxnormfiles.html",
              "RxNorm": "https://www.nlm.nih.gov/research/umls/rxnorm/docs/rxnormfiles.html",
              "RxNorm Extension": "https://www.nlm.nih.gov/research/umls/rxnorm/docs/rxnormfiles.html", #note sure about this one
              "Observation Type": "https://athena.ohdsi.org/search-terms/terms/",
              "None": "https://athena.ohdsi.org/search-terms/terms/",
              "CPT4": "https://www.nlm.nih.gov/research/umls/licensedcontent/umlsknowledgesources.html"
            }

            out = {
              "id": str(row["id"]),
              "identifier": [{ 
                "system": "https://redivis.com/datasets/ye2v-6skh7wdr7/tables",
                "value": "MedicationStatement/" + str(row["drug_exposure_id"])
              },
              {
                "system": "https://redivis.com/datasets/ye2v-6skh7wdr7/tables",
                "value": "Patient/" + str(row["person_id"])
              }], 
              "resourceType":"MedicationStatement",
              "status": "recorded",
              "subject": {"reference":"Patient/" + str(row["person_id_uuid"])},
              #"partOf": {"reference": "MedicationStatement/" + str(row["medication_statement_id"])}, # pass this in downstream from medication statement
              "medication":{
                "concept":{
                  "coding":[{
                    "system": vocab_code_to_display[str(row["CONCEPT_VOCAB_ID"])],
                    "display": str(row["CONCEPT_ID_NAME"]),
                    "code": str(row["CONCEPT_ID_CODE"])
                  }],
                  "text": str(row["CONCEPT_ID_NAME"]),
                },
              },
              "effectivePeriod":{
                "start": row["drug_exposure_start_date"],
                "end": row["drug_exposure_end_date"]
              },
              "extension":[{
                "url": "https://ohdsi.github.io/CommonDataModel/cdm53.html#DRUG_EXPOSURE__TYPE_CONCEPT_ID",
                "valueString": str(row["DRUG_TYPE_CONCEPT_ID_CODE"])
              }]
            }
            
            if "drug_exposure_start_datetime" in row and row["drug_exposure_start_datetime"] is not None:
              out["effectivePeriod"]["start"] = row["drug_exposure_start_datetime"]
            if "drug_exposure_end_datetime" in row and row["drug_exposure_end_datetime"] is not None:
              out["effectivePeriod"]["end"] = row["drug_exposure_end_datetime"]
            
            if "provider_id" in row and row["provider_id"] is not None:
              if(is_int(row["provider_id"])):
                out["informationSource"] = [{"reference":"Practitioner/" + str(int(row["provider_id"]))}]
              else:
                out["informationSource"] = [{"reference":"Practitioner/" + str(row["provider_id"])}]
            
            if "stop_reason" in row and row["stop_reason"] is not None:
              out["statusReason"] = [{
                "coding":[{
                  "code": row["stop_reason"], # this should be looked up / mapped if there is a reason
                  "display": "filler",
                  "system": "filler",
                }],
                "text":"filler",
              }]
            
            if "visit_occurrence_id_uuid" in row and row["visit_occurrence_id_uuid"] is not None:
              out["encounter"] =  {"reference":"Encounter/" + str(row["visit_occurrence_id_uuid"])}
              out["identifier"].append(
               {
                "system": "https://redivis.com/datasets/ye2v-6skh7wdr7/tables",
                "value": "Encounter/" + str(row["visit_occurrence_id"])
               })

            if (("drug_source_value" in row and row["drug_source_value"] is not None) or\
                ("lot_number" in row and row["lot_number"] is not None) or\
                ("drug_source_concept_id" in row and row["drug_source_concept_id"] is not None)):
              if "drug_source_value" in row and row["drug_source_value"] is not None:
                out["extension"].append({
                  "url": "filler",
                  "valueString": (row["drug_source_value"])
                })
              if "lot_number" in row and row["lot_number"] is not None:
                out["extension"].append({
                  "url": "filler",
                  "valueInteger": int(row["lot_number"])
                })
              if "drug_source_concept_id" in row and row["drug_source_concept_id"] is not None:
                out["extension"].append({
                  "url":"filler",
                  "valueString": (row["drug_source_concept_id"])
                })
                
            # TODO: visit_detail_id: since this field is a child of its encounter instance
            # this probably maps to something in encounter and not here

            if (("route_source_value" in row and row["route_source_value"] is not None) or\
                ("dose_unit_source_value" in row and row["dose_unit_source_value"] is not None)):
              out["extension"] = []
              if "route_source_value" in row and row["route_source_value"] is not None:
                out["extension"].append({
                  "url":"filler",
                  "valueString": (row["route_source_value"])
                })
              if "dose_unit_source_value" in row and row["dose_unit_source_value"] is not None: 
                out["extension"].append({
                  "url":"filler",
                  "valueString": (row["dose_unit_source_value"])
                })

            return out
    
    # Iceberg doesn't have medication statement currently
    #- objectValidate:
        #schema: "{{config.schema}}"
        #title: MedicationStatement
        
    #- debug: {}
    - emit:
        name: MedicationStatement

