
class: sifter
name: observation_omop_to_fhir

outdir: ../output

config:
  schema: ../iceberg/schemas/bmeg/
  observation_file: ../data_used/Eunomia_observation.json
  conceptData: ../data_used/MASTER_CONCEPT_TABLE_MODIFIED.json

#NOTE: when hooking up to other tables using a lookup the 
# column names aren't always in the same case.
# sometimes all caps somtimes camel case, snake case, etc.
# There needs to be some script that cleans/reformats
# the data into JSON and Standardizing the column names 
# before running this. Current code clippings can be found in 
# fhir_to_omop/helper-script.py

inputs:
  observation_Data:
    plugin:
       commandLine: python3 epochtime_convert.py {{config.observation_file}} Observation
    
  conceptData:
    jsonLoad:
      input: "{{config.conceptData}}"

pipelines:
  conceptTable:
    - from: conceptData
    - map:
        method: fix
        gpython: |
          def fix(row):
            return {
              "concept_id": str(int(row["concept_id"])),
              "vocabulary_id": str(row["vocabulary_id"]),
              "concept_code": str(row["concept_code"]),
              "concept_class_id": str(row["concept_class_id"]),
              "concept_name": str(row["concept_name"])
            }

  observation:
    - from: observation_Data
    - lookup:
        pipeline:
          from: conceptTable
          key: concept_id
        lookup: "{{row.OBSERVATION_CONCEPT_ID}}"
        copy: 
          NEW_VOCABULARY_ID: vocabulary_id
          CONCEPT_CODE: concept_code
          CODE_CONCEPT_NAME: concept_name
          
    
    - lookup:
        pipeline:
          from: conceptTable
          key: concept_id
        lookup: "{{row.OBSERVATION_TYPE_CONCEPT_ID}}"
        copy: 
          VOCABULARY_TYPE_CONCEPT_ID: vocabulary_id
          TYPE_CONCEPT_ID_NAME: concept_name
          TYPE_CONCEPT_ID_CODE: concept_code
    
    - lookup:
        pipeline:
          from: conceptTable
          key: concept_id
        lookup: "{{row.OBSERVATION_SOURCE_CONCEPT_ID}}"
        copy: 
          VOCABULARY_SOURCE_CONCEPT_ID: vocabulary_id
          CONCEPT_CLASS: concept_class_id
          CONCEPT_NAME: concept_name
          

    # source concept IDS should be extensions because they hold the ID and not the code
    # so it doesn't make sense for them to be codeable concepts
    - map:
        method: populate_observation
        gpython : |
          def is_url(string):
            if string.startswith('http://') or string.startswith('https://'):
              return True
            return False
            
          def is_int(num):
            try:
              int(num)
              return True
            except ValueError:
              return False
          
          def populate_observation(row):
            vocab_code_to_display = {
              "NUCC": "https://www.nucc.org/",
              "CMS Place of Service": "https://www.cms.gov/Medicare/Coding/place-of-service-codes",
              "SNOMED":"http://snomed.info/sct/",
              "LOINC": "https://loinc.org/",
              "Visit": "https://athena.ohdsi.org/search-terms/terms/",
              "Type Concept": "https://athena.ohdsi.org/search-terms/terms/",
              "ICD9CM": "https://www.cms.gov/Medicare/Coding/ICD9ProviderDiagnosticCodes/codes",
              "ICD10CM": "https://icd10cmtool.cdc.gov/",
              "SOPT": "https://www.nahdo.org/sopt",
              "Relationship": "https://athena.ohdsi.org/search-terms/terms/",
              "Vocabulary": "https://athena.ohdsi.org/search-terms/terms/",
              "UCUM": "https://ucum.org/",
              "MeSH": "https://www.nlm.nih.gov/research/umls/licensedcontent/umlsknowledgesources.html",
              "NDFRT": 'https://www.nlm.nih.gov/research/umls/rxnorm/docs/rxnormfiles.html',
              "Condition Type": "https://athena.ohdsi.org/search-terms/terms/",
              "NDC": "https://www.nlm.nih.gov/research/umls/rxnorm/docs/rxnormfiles.html",
              "RxNorm": "https://www.nlm.nih.gov/research/umls/rxnorm/docs/rxnormfiles.html",
              "RxNorm Extension": "https://www.nlm.nih.gov/research/umls/rxnorm/docs/rxnormfiles.html", #note sure about this one
              "Observation Type": "https://athena.ohdsi.org/search-terms/terms/"
            }

            observation_concept_class_mapper = {
              "Context-dependent":"survey", # <-- what would you even put for context dependant? 
              "Clinical Finding": "exam",
              "Morph Abnormality": "exam",
              "Event": "exam"
            }
            #if "CONCEPT_CLASS" in row:
              #print(row["CONCEPT_CLASS"])
            items = [val for val in row.items() if val[1] is not None]
            required_fields = ["OBSERVATION_ID", "PERSON_ID", "OBSERVATION_CONCEPT_ID", "OBSERVATION_DATE", "observation_type_concept_id"]      

            if (is_int(row["CONCEPT_CODE"])):
              row["CONCEPT_CODE"] = int(row["CONCEPT_CODE"])
            assert(not all(item in items for item in required_fields)),"Error, not all required fields are present in OMOP structures"
            out = {
              "id": str(int(row["OBSERVATION_ID"])),
              "status": "final",
              "effectiveDateTime": str(row["OBSERVATION_DATE"]),
              "resourceType": "Observation",
              "subject": {"reference": "Patient/" + str(int(row["PERSON_ID"]))},
              "code":{
                "coding":[{
                  "system":  str(vocab_code_to_display[row["NEW_VOCABULARY_ID"]]),
                  "code": str(row["CONCEPT_CODE"]),
                  "display": str(row["CODE_CONCEPT_NAME"])
                }],
                "text": str(row["CODE_CONCEPT_NAME"])

              },
              "category":[{
                "coding":[{
                  "system": str(vocab_code_to_display[row["VOCABULARY_TYPE_CONCEPT_ID"]]),
                  "code": str(row["TYPE_CONCEPT_ID_CODE"]),
                  "display": str(row["TYPE_CONCEPT_ID_NAME"])
                }, 
                {
                  "system": "http://hl7.org/fhir/ValueSet/observation-category",
                  "code": observation_concept_class_mapper[row["CONCEPT_CLASS"]],
                  "display": observation_concept_class_mapper[row["CONCEPT_CLASS"]], #row["CONCEPT_NAME"]
                }
               ],
                "text": observation_concept_class_mapper[row["CONCEPT_CLASS"]],
              }],
              "extension": [],
            }

            if "OBSERVATION_SOURCE_CONCEPT_ID" in row and row["OBSERVATION_SOURCE_CONCEPT_ID"] is not None:
              out["code"]["coding"].append(
                {
                  "system": "https://athena.ohdsi.org/search-terms/terms/", 
                  # I think this will always be an OMOP code that is pointing to an actual code system. 
                  # will probably end up changing this soon str(vocab_code_to_display[row["VOCABULARY_SOURCE_CONCEPT_ID"]]),
                  "code": str(int(row["OBSERVATION_SOURCE_CONCEPT_ID"])),
                  "display": str(row["CONCEPT_NAME"]),
                })
            
            if "QUALIFIER_CONCEPT_ID" in row and row["QUALIFIER_CONCEPT_ID"] is not None:
              out["note"] = [{
                "text": str(int(row["QUALIFIER_CONCEPT_ID"]))
              }]

            if "PROVIDER_ID" in row and row["PROVIDER_ID"] is not None:
              if(is_int(row["PROVIDER_ID"])):
                out["performer"] = [{"reference":"Practitioner/" + str(int(row["PROVIDER_ID"]))}]
              else:
                out["performer"] = [{"reference":"Practitioner/" + str(row["PROVIDER_ID"])}]

            if "VISIT_OCCURRENCE_ID" in row and row["VISIT_OCCURRENCE_ID"] is not None:
              if(is_int(row["VISIT_OCCURRENCE_ID"])):
                out["encounter"] = {"reference": "Encounter/" + str(int(row["VISIT_OCCURRENCE_ID"]))}  
              else:
                out["encounter"] = {"reference": "Encounter/" + str(row["VISIT_OCCURRENCE_ID"])} 

            # I think VISIT_DETAIL_ID should be a reference to encounter but you can only have one of those
            # So going to make it an extension instead.
            if "VISIT_DETAIL_ID" in row and row["VISIT_DETAIL_ID"] is not None:
              if(is_int(row["VISIT_DETAIL_ID"])):
                out["extension"].append({
                  "url":"http://hl7.org/fhir/StructureDefinition/#ENCOUNTER_Reference_id",
                  "valueReference": {"reference": "Encounter/" + str(int(row["VISIT_DETAIL_ID"]))}}) 
              else:
                raise Exception("VISIT_DETAIL_ID should be an integer and it is not")

            extensions = ["OBSERVATION_SOURCE_VALUE","UNIT_SOURCE_VALUE","QUALIFIER_SOURCE_VALUE"]
            for value in extensions:
              if(value in row and row[value] is not None):
                if(is_int(row[value])):
                  out["extension"].append({
                    "url":"http://hl7.org/fhir/StructureDefinition/#OBSERVATION" + "__" + value,
                    "valueInteger": int(row[value])
                  })
                else:
                  out["extension"].append({
                      "url":"https://ohdsi.github.io/CommonDataModel/cdm54.html#OBSERVATION" + "__" + value,
                      "valueString": str(row[value])
                  })
            if "unit_concept_id" in row and row["unit_concept_id"] is not None:
              out["valueQuantity"] = row["unit_concept_id"]

            hits = 0
            if "value_as_number" in row and row["value_as_number"] is not None:
              out["valueInteger"] = row["value_as_number"]
              hits += 1
            
            elif "value_as_string" in row and row["value_as_string"] is not None:
              out["valueString"] = row["value_as_string"]
              hits += 1

            # this one needs to get mapped to a concept_code but for now since there isn't any actual data for it
            # it will remain how it is
            elif "value_as_concept_id" in row and row["value_as_concept_id"] is not None:
              out["valueCodeableConcept"] = {
                'coding': 
                  [{
                    'system': "https://www.hl7.org/fhir/structuredefinition-value_as_concept_id",
                    'code': str(row["value_as_concept_id"]),
                    'display': str(row["value_as_concept_id"])
                  }]
              }
              hits +=1
            if hits > 1:
              raise Exception("value_as_string, value_as_concept_id and value_as_number as mutually exclusive fields yet there are multiple of them present in this row")

            if "extension" in row and len(row["extension"]) == 0:
              del(row["extension"])

            return out
    
    - project:
        mapping:
          identifier: [{ 
                "system": "https://github.com/OHDSI/Eunomia",
                "value": "{{row.id}}"
            }]
    # this is disabled because the row ID does not match the regex [ \\r\\n\\t\\S]+
    # it will go away when the uuids are added
    #- objectValidate:
        #schema: "{{config.schema}}"
        #title: Observation
        
    - emit:
        name: Observation



            

            
